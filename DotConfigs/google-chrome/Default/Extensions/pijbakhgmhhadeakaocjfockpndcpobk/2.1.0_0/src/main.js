var pe=Object.defineProperty;var he=(l,u,m)=>u in l?pe(l,u,{enumerable:!0,configurable:!0,writable:!0,value:m}):l[u]=m;var L=(l,u,m)=>(he(l,typeof u!="symbol"?u+"":u,m),m);(function(){"use strict";const l={timestamp:"ytd-thumbnail-overlay-time-status-renderer",designAnchor:{old:"ytd-playlist-sidebar-renderer",new:"ytd-playlist-header-renderer"},playlistSummary:{old:"#ytpdc-playlist-summary-old",new:"#ytpdc-playlist-summary-new"},playlistMetadata:{old:"ytd-playlist-sidebar-renderer #items",new:".immersive-header-content .metadata-action-bar"},video:"ytd-playlist-video-renderer",playlist:"ytd-playlist-video-list-renderer #contents",channelName:".ytd-channel-name",videoTitle:"#video-title",videoIndex:"yt-formatted-string#index",videoInfo:"yt-formatted-string#video-info",stats:{old:"#stats yt-formatted-string",new:".metadata-stats yt-formatted-string"}};class u{sort(e,o){return[...e].sort((s,n)=>{const r=l.channelName,a=s.querySelector(r).innerText,i=n.querySelector(r).innerText;if(o==="asc")return a.localeCompare(i);if(o==="desc")return i.localeCompare(a)})}}const m=t=>{const e=`${Math.floor(t/3600)}`.padStart(2,"0");t%=3600;const o=`${Math.floor(t/60)}`.padStart(2,"0"),s=`${t%60}`.padStart(2,"0");return`${e}:${o}:${s}`},B=t=>{let e=t.split(":").map(n=>parseInt(n,10)),o=0,s=1;for(;e.length>0;){let n=e.pop();isNaN(n)||(o+=s*n,s*=60)}return o},v=t=>{if(!t)return null;const e=t.querySelector(l.timestamp);if(!e)return null;const o=e.innerText;return o?B(o):null};class q{sort(e,o){return[...e].sort((s,n)=>{const r=v(s),a=v(n);if(o==="asc")return r-a;if(o==="desc")return a-r})}}class U{sort(e,o){return[...e].sort((s,n)=>{const r=s.querySelector(l.videoIndex).innerText,a=n.querySelector(l.videoIndex).innerText;if(o==="asc")return Number(r)-Number(a);if(o==="desc")return Number(a)-Number(r)})}}class h{parse(e){const o={minute:60,hour:3600,day:86400,week:604800,month:2592e3,year:31536e3},s=e.children[2],n=/(?:streamed )?(\d+) (\w+) ago/,[r,a]=s.textContent.toLowerCase().match(n).slice(1),i=a.endsWith("s")?a.slice(0,-1):a;return parseFloat(r)*o[i]}}class C{parse(e){const o={minuto:60,hora:3600,día:86400,semana:604800,mes:2592e3,meses:2592e3,año:31536e3},s=e.children[2],n=/(?:emitido )?hace (\d+) (minutos?|horas?|días?|semanas?|mes|meses|años?)/u,[r,a]=s.textContent.toLowerCase().match(n).slice(1),i=o[a]??o[a.slice(0,-1)]??1;return parseFloat(r)*i}}class P{parse(e){const o={minuto:60,hora:3600,dia:86400,semana:604800,mês:2592e3,meses:2592e3,ano:31536e3},s=e.children[2],n=/(?:transmitido )?há (\d+) (minutos?|horas?|dias?|semanas?|mês|meses|anos?)/u,[r,a]=s.textContent.toLowerCase().replaceAll(/\s/g," ").match(n).slice(1),i=o[a]??o[a.slice(0,-1)]??1;return parseFloat(r)*i}}class R{parse(e){const o={分钟:60,小时:3600,天:86400,周:604800,个月:2592e3,年:31536e3},s=e.children[2],n=/(\d+)([\u4e00-\u9fa5]+)前/,[r,a]=s.textContent.toLowerCase().match(n).slice(1);return parseFloat(r)*o[a]}}class k{parse(e){const o={分鐘:60,小時:3600,天:86400,週:604800,個月:2592e3,年:31536e3},s=e.children[2],n=/(\d+)(.*)前/,[r,a]=s.textContent.toLowerCase().replaceAll(/\s/g," ").match(n).slice(1).map(i=>i.trim());return parseFloat(r)*o[a]}}const I={en:h,"en-GB":h,"en-IN":h,"en-US":h,"es-ES":C,"es-419":C,"es-US":C,"pt-PT":P,"pt-BR":P,"zh-Hans-CN":R,"zh-Hant-TW":k},W=t=>I[t]??h,F=()=>Object.keys(I);class b{sort(e,o){return[...e].sort((s,n)=>{const r=s.querySelector(l.videoInfo),a=n.querySelector(l.videoInfo),i=this.parseUploadDate(r),d=this.parseUploadDate(a);if(o==="asc")return i-d;if(o==="desc")return d-i})}parseUploadDate(e){return new H(document.documentElement.lang).parse(e)}}L(b,"supportedLocales",F());class H{constructor(e){const o=W(e);this.parser=new o}parse(e){if(!this.parser)throw new Error("No upload date parser defined");return this.parser.parse(e)}}class f{parse(e){const o=e.firstElementChild,s=/(\d+(\.\d+)?[km]?)/g,[n]=o.textContent.toLowerCase().match(s),r=n.slice(-1),a=parseFloat(n);return isNaN(a)?0:Math.round(r==="k"?a*1e3:r==="m"?a*1e6:a)}}class ${parse(e){const s=e.firstElementChild.textContent.toLowerCase().replaceAll(/\s/g," ").split(" "),n=parseFloat(s[0]);return s.length===3&&s[1]==="lakh"?Math.round(n*1e5):s.length===2&&s[0].endsWith("k")?Math.round(n*1e3):Math.round(n)}}class x{parse(e){const o=e.firstElementChild,[s,n]=o.textContent.trim().toLowerCase().replaceAll(/\s/g," ").split(" "),r=parseFloat(s.replace(",","."));return isNaN(r)?0:Math.round(n==="k"?r*1e3:n==="m"?r*1e6:r)}}class A{parse(e){const s=e.firstElementChild.textContent.toLowerCase().replaceAll(/\s/g," ").split(" "),n=parseFloat(s[0].replace(",","."));return s.length===3&&s[1]==="mil"?Math.round(n*1e3):s.length===4&&["m","mi"].includes(s[1])&&s[2]==="de"?Math.round(n*1e6):Math.round(n)}}class O{parse(e){const o=e.firstElementChild,s=/(\d+(\.\d+)?万?)/g,[n]=o.textContent.toLowerCase().match(s),r=n.slice(-1),a=parseFloat(n);return isNaN(a)?0:Math.round(r==="万"?a*1e4:a)}}class Z{parse(e){const s=e.firstElementChild.textContent.trim().toLowerCase().split("："),n=parseFloat(s[1]);return isNaN(n)?0:s[1].endsWith("萬次")?Math.round(n*1e4):(s[1].endsWith("次"),Math.round(n))}}const V={en:f,"en-GB":f,"en-IN":$,"en-US":f,"es-ES":x,"es-419":x,"es-US":x,"pt-PT":A,"pt-BR":A,"zh-Hans-CN":O,"zh-Hant-TW":Z},z=t=>V[t]??f,j=()=>Object.keys(V);class M{sort(e,o){return[...e].sort((s,n)=>{const r=s.querySelector(l.videoInfo),a=n.querySelector(l.videoInfo);if(r.children.length===0||a.children.length===0)return 0;const i=this.extractViews(r),d=this.extractViews(a);if(o==="asc")return i-d;if(o==="desc")return d-i})}extractViews(e){return new Y(document.documentElement.lang).parse(e)}}L(M,"supportedLocales",j());class Y{constructor(e){const o=z(e);this.parser=new o}parse(e){if(!this.parser)throw new Error("No views parser defined");return this.parser.parse(e)}}class y{constructor(e){const[o,s]=e.split(":"),r=y.getSortTypes()[o].strategy;this.strategy=new r,this.sortOrder=s}sort(e){return this.strategy.sort(e,this.sortOrder)}static getSortTypes(){return{index:{enabled:g(l.videoIndex),label:{asc:chrome.i18n.getMessage("sortType_index_label_asc"),desc:chrome.i18n.getMessage("sortType_index_label_desc")},strategy:U},duration:{enabled:g(l.timestamp),label:{asc:chrome.i18n.getMessage("sortType_duration_label_asc"),desc:chrome.i18n.getMessage("sortType_duration_label_desc")},strategy:q},channelName:{enabled:g(l.channelName),label:{asc:chrome.i18n.getMessage("sortType_channelName_label_asc"),desc:chrome.i18n.getMessage("sortType_channelName_label_desc")},strategy:u},views:{enabled:g(l.videoInfo)&&M.supportedLocales.includes(document.documentElement.lang),label:{asc:chrome.i18n.getMessage("sortType_views_label_asc"),desc:chrome.i18n.getMessage("sortType_views_label_desc")},strategy:M},uploadDate:{enabled:g(l.videoInfo)&&!G()&&b.supportedLocales.includes(document.documentElement.lang),label:{asc:chrome.i18n.getMessage("sortType_uploadDate_label_asc"),desc:chrome.i18n.getMessage("sortType_uploadDate_label_desc")},strategy:b}}}static getSortOptions(){const e=y.getSortTypes();return Object.keys(e).flatMap(o=>{const{enabled:s,label:n}=e[o];return s?Object.keys(n).map(r=>{const a=document.createElement("div");return a.classList.add("ytpdc-sort-control-dropdown-option"),a.setAttribute("value",`${o}:${r}`),a.textContent=n[r],a}):[]})}}const g=t=>{const e=document.querySelector(l.video);return e&&e.querySelector(t)},G=()=>document.querySelector("#filter-menu yt-sort-filter-sub-menu-renderer")!==null,w=()=>{J()},J=()=>{K();const t=60;let e=0,o=setInterval(()=>{if(e>=t&&clearInterval(o),e>15&&window.location.pathname!=="/playlist"){clearInterval(o);return}document.querySelector(l.timestamp)&&Q()===X()&&(clearInterval(o),te()),e++},1e3)},K=()=>{const t=T();if(!t)return;const e=document.createElement("div");e.id="ytpdc-loader",e.textContent=chrome.i18n.getMessage("loaderMessage"),t.innerHTML="",t.appendChild(e)},T=()=>{const t=l.playlistSummary[E()?"new":"old"];return document.querySelector(t)},E=()=>{const t={new:document.querySelector(l.designAnchor.new),old:document.querySelector(l.designAnchor.old)};return t.new&&t.old.getAttribute("hidden")!==null},Q=()=>_().map(v).filter(t=>t===null).length,_=()=>[...document.querySelector(l.playlist).getElementsByTagName(l.video)],X=()=>_().filter(ee).length,ee=t=>{var n,r;return!!(((n=t.querySelector(l.timestamp))==null?void 0:n.innerText.trim())===""||[chrome.i18n.getMessage("videoTitle_private"),chrome.i18n.getMessage("videoTitle_deleted"),chrome.i18n.getMessage("videoTitle_unavailable_v1"),chrome.i18n.getMessage("videoTitle_unavailable_v2"),chrome.i18n.getMessage("videoTitle_restricted"),chrome.i18n.getMessage("videoTitle_ageRestricted")].includes(N(t))||((r=t.querySelector(l.channelName))==null?void 0:r.innerText.trim())==="")},N=t=>{var e;return(e=t.querySelector(l.videoTitle))==null?void 0:e.title},te=()=>{ne();const t=se(),o=_().map(v),s=Array.isArray(o)&&o.length>0?o.reduce((r,a)=>r+a):0,n=m(s);le({timestamps:o,playlistDuration:n,playlistObserver:t})},ne=()=>{var o;if(window.ytpdc&&window.ytpdc.pageSetupDone)return;window.ytpdc={pageSetupDone:!1,playlistObserver:null,sortDropdown:{used:!1,element:null},lastVideoInteractedWith:null};const t=()=>{var s;(s=window.ytpdc.playlistObserver)==null||s.disconnect(),window.ytpdc={pageSetupDone:!1,playlistObserver:null,sortDropdown:{used:!1,element:null},lastVideoInteractedWith:null},w()};document.addEventListener("yt-navigate-finish",t,!1);const e=s=>{window.ytpdc.lastVideoInteractedWith=s.target.closest(l.video)};(o=document.querySelector(l.playlist))==null||o.addEventListener("click",e),window.ytpdc.pageSetupDone=!0},se=()=>{if(window.ytpdc.playlistObserver)return window.ytpdc.playlistObserver;const t=document.querySelector(l.playlist);if(!t)return null;const e=new MutationObserver(oe);return e.observe(t,{childList:!0}),window.ytpdc.playlistObserver=e,{disconnect:()=>e.disconnect(),reconnect:()=>e.observe(t,{childList:!0})}},oe=(t,e)=>{const o=document.querySelector(l.playlist);if(t.length===1&&t[0].type==="childList"){const s=t[0];if(re(s)){ae([chrome.i18n.getMessage("problemEncountered_paragraphOne"),chrome.i18n.getMessage("problemEncountered_paragraphTwo")]),e.disconnect();return}const n=s.removedNodes[0];N(n)!==N(window.ytpdc.lastVideoInteractedWith)&&(s.previousSibling?s.previousSibling.after(n):s.nextSibling&&s.nextSibling.before(n)),e.disconnect(),window.ytpdc.lastVideoInteractedWith.remove(),e.observe(o,{childList:!0}),w()}else w()},re=t=>{var e;return t.addedNodes.length===0&&t.removedNodes.length===1&&((e=t.removedNodes[0])==null?void 0:e.tagName.toLowerCase())===l.video&&window.ytpdc.sortDropdown.used&&!window.ytpdc.lastVideoInteractedWith},ae=t=>{const e=T();if(!e)return;const o=document.createElement("div");o.id="messages-container",t.forEach(s=>{const n=document.createElement("p");n.textContent=s,o.appendChild(n)}),e.innerHTML="",e.appendChild(o)},le=({timestamps:t,playlistDuration:e,playlistObserver:o})=>{const s=ie({timestamps:t,playlistDuration:e,playlistObserver:o}),n=T();if(n)n.replaceWith(s);else{const r=document.querySelector(l.playlistMetadata[E()?"new":"old"]);if(!r)return null;r.parentElement.insertBefore(s,r.nextElementSibling)}},ie=({timestamps:t,playlistDuration:e,playlistObserver:o})=>{const s=E(),n=document.createElement("div");n.id=l.playlistSummary[s?"new":"old"].replace("#",""),n.classList.add("container"),s||(ce()||(n.style.background="rgba(0,0,0,0.8)"),n.style.color="white");const r=D(chrome.i18n.getMessage("playlistSummary_totalDuration"),`${e}`,"#86efac");n.appendChild(r);const a=D(chrome.i18n.getMessage("playlistSummary_videosCounted"),`${t.length}`,"#fdba74");n.appendChild(a);const i=de(),d=D(chrome.i18n.getMessage("playlistSummary_videosNotCounted"),`${i?i-t.length:"N/A"}`,"#fca5a5");if(n.appendChild(d),i<=100)if(window.ytpdc.sortDropdown.element)n.appendChild(window.ytpdc.sortDropdown.element);else{const c=ue(o);window.ytpdc.sortDropdown.element=c,n.appendChild(c)}if(i>=100){const c=document.createElement("div");c.id="ytpdc-playlist-summary-tooltip";const p=document.createElementNS("http://www.w3.org/2000/svg","svg");p.setAttribute("preserveAspectRatio","xMidYMid meet"),p.setAttribute("viewBox","0 0 24 24"),p.innerHTML=`<path fill="white" fill-rule="evenodd" d="M12 1C5.925 1 1
    5.925 1 12s4.925 11 11 11s11-4.925 11-11S18.075 1 12 1Zm-.5 5a1 1 0 1 0 0
    2h.5a1 1 0 1 0 0-2h-.5ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0
    0-2h-1v-4a1 1 0 0 0-1-1h-2Z" clip-rule="evenodd"/>`,c.appendChild(p);const S=document.createElement("p");S.textContent=chrome.i18n.getMessage("playlistSummary_tooltip"),c.appendChild(S),n.appendChild(c)}return n},ce=()=>document.documentElement.getAttribute("dark")!==null,D=(t,e,o="#facc15")=>{const s=document.createElement("div");s.classList.add("ytpdc-playlist-summary-item");const n=document.createElement("p");n.textContent=t;const r=document.createElement("p");return r.classList.add("ytpdc-playlist-summary-item-value"),r.style.color=o,r.textContent=e,s.appendChild(n),s.appendChild(r),s},de=()=>{const t=document.querySelector(l.stats[E()?"new":"old"]);return t?parseInt(t.innerText.replace(/\D/g,"")):null},ue=t=>{const e=document.createElement("div");e.id="ytpdc-sort-control";const o=document.createElement("p");o.classList.add("label"),o.textContent=chrome.i18n.getMessage("sortDropdown_label");const s=document.createElement("div");s.id="ytpdc-sort-control-dropdown-container";const n=document.createElement("button");n.id="ytpdc-sort-control-dropdown-button";const r=document.createElement("span"),a=document.createElement("div");a.id="ytpdc-sort-control-dropdown-options",a.classList.add("hidden"),n.addEventListener("click",()=>{a.classList.toggle("hidden")});const i=y.getSortOptions();i.forEach(c=>{a.appendChild(c)}),r.textContent=i[0].textContent,a.addEventListener("click",c=>{if(!c.target.classList.contains("ytpdc-sort-control-dropdown-option"))return;window.ytpdc.sortDropdown.used=!0,a.classList.toggle("hidden"),r.textContent=c.target.textContent,t==null||t.disconnect();const p=document.querySelector(l.playlist),S=p.getElementsByTagName(l.video),me=new y(c.target.getAttribute("value")).sort([...S].slice(0,100));p.replaceChildren(...me),t==null||t.reconnect()});const d=document.createElementNS("http://www.w3.org/2000/svg","svg");return d.setAttribute("viewBox","0 0 256 256"),d.innerHTML=`<path fill="currentColor" d="m216.49 104.49l-80
  80a12 12 0 0 1-17 0l-80-80a12 12 0 0 1 17-17L128 159l71.51-71.52a12 12 0 0 1
  17 17Z"/>`,n.appendChild(r),n.appendChild(d),s.appendChild(n),s.appendChild(a),e.appendChild(o),e.appendChild(s),e},ye="";document.readyState!=="loading"?w():document.addEventListener("DOMContentLoaded",()=>{w()})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
